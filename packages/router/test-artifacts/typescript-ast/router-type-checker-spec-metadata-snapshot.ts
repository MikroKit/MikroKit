/**
 * IT IS VERY IMPORTANT TO REVIEW AND UPDATE THIS SNAPSHOT OF THE GENERATED METADATA FROM api-routes.ts file
 * The values of this snapshot should be as expected for unit test to work correctly
 * */

export const metadataSnapshot: any = {
    'api-routes.ts/functionWithNoTypes': {
        exportedName: 'functionWithNoTypes',
        fileName: 'api-routes.ts',
        metadata: {
            exportedName: 'functionWithNoTypes',
            kind: 'FunctionDeclaration',
            parameters: {
                body: {
                    type: 'any',
                    name: '',
                    escapedName: '',
                    fullyQualifiedName: '',
                    type_text: 'any',
                    aliasType: null,
                    aliasTypeArguments: null,
                    structure: {
                        name: 'body',
                        isReadonly: false,
                        decorators: [],
                        hasQuestionToken: false,
                        hasOverrideKeyword: false,
                        kind: 30,
                        isRestParameter: false,
                    },
                },
                data: {
                    type: 'any',
                    name: '',
                    escapedName: '',
                    fullyQualifiedName: '',
                    type_text: 'any',
                    aliasType: null,
                    aliasTypeArguments: null,
                    structure: {
                        name: 'data',
                        isReadonly: false,
                        decorators: [],
                        hasQuestionToken: false,
                        hasOverrideKeyword: false,
                        kind: 30,
                        isRestParameter: false,
                    },
                },
                req: {
                    type: 'any',
                    name: '',
                    escapedName: '',
                    fullyQualifiedName: '',
                    type_text: 'any',
                    aliasType: null,
                    aliasTypeArguments: null,
                    structure: {
                        name: 'req',
                        isReadonly: false,
                        decorators: [],
                        hasQuestionToken: false,
                        hasOverrideKeyword: false,
                        kind: 30,
                        isRestParameter: false,
                    },
                },
                reply: {
                    type: 'any',
                    name: '',
                    escapedName: '',
                    fullyQualifiedName: '',
                    type_text: 'any',
                    aliasType: null,
                    aliasTypeArguments: null,
                    structure: {
                        name: 'reply',
                        isReadonly: false,
                        decorators: [],
                        hasQuestionToken: false,
                        hasOverrideKeyword: false,
                        kind: 30,
                        isRestParameter: false,
                    },
                },
            },
            returnType: {
                type: '{ sentence: string; }',
                name: '__object',
                escapedName: '__object',
                fullyQualifiedName: '__object',
                type_text: '{ sentence: string; }',
                aliasType: null,
                aliasTypeArguments: null,
                structure: null,
            },
        },
    },
    'api-routes.ts/functionWithNoReturType': {
        exportedName: 'functionWithNoReturType',
        fileName: 'api-routes.ts',
        metadata: {
            exportedName: 'functionWithNoReturType',
            kind: 'FunctionDeclaration',
            parameters: {
                body: {
                    type: 'User',
                    name: 'User',
                    escapedName: 'User',
                    fullyQualifiedName: 'User',
                    type_text: 'User',
                    aliasType: null,
                    aliasTypeArguments: null,
                    structure: {
                        name: 'body',
                        type: 'User',
                        isReadonly: false,
                        decorators: [],
                        hasQuestionToken: false,
                        hasOverrideKeyword: false,
                        kind: 30,
                        isRestParameter: false,
                    },
                },
                api: {
                    type: 'ApiDS',
                    name: 'ApiDS',
                    escapedName: 'ApiDS',
                    fullyQualifiedName: '"/{{PROJECT_ROOT}}/packages/router/src/types".ApiDS',
                    type_text: 'import("/{{PROJECT_ROOT}}/packages/router/src/types").ApiDS',
                    aliasType: null,
                    aliasTypeArguments: null,
                    structure: {
                        name: 'api',
                        type: 'ApiDS',
                        isReadonly: false,
                        decorators: [],
                        hasQuestionToken: false,
                        hasOverrideKeyword: false,
                        kind: 30,
                        isRestParameter: false,
                    },
                },
                req: {
                    type: 'FastifyRequest<RouteGenericInterface, Server, IncomingMessage, unknown, FastifyLoggerInstance>',
                    name: 'FastifyRequest',
                    escapedName: 'FastifyRequest',
                    fullyQualifiedName: '"/{{PROJECT_ROOT}}/node_modules/fastify/types/request".FastifyRequest',
                    type_text:
                        'import("/{{PROJECT_ROOT}}/node_modules/fastify/types/request").FastifyRequest<import("/{{PROJECT_ROOT}}/node_modules/fastify/types/route").RouteGenericInterface, import("http").Server, import("http").IncomingMessage, unknown, import("/{{PROJECT_ROOT}}/node_modules/fastify/types/logger").FastifyLoggerInstance>',
                    aliasType: null,
                    aliasTypeArguments: null,
                    structure: {
                        name: 'req',
                        type: 'FastifyRequest',
                        isReadonly: false,
                        decorators: [],
                        hasQuestionToken: false,
                        hasOverrideKeyword: false,
                        kind: 30,
                        isRestParameter: false,
                    },
                },
                reply: {
                    type: 'FastifyReply<Server, IncomingMessage, ServerResponse, RouteGenericInterface, unknown>',
                    name: 'FastifyReply',
                    escapedName: 'FastifyReply',
                    fullyQualifiedName: '"/{{PROJECT_ROOT}}/node_modules/fastify/types/reply".FastifyReply',
                    type_text:
                        'import("/{{PROJECT_ROOT}}/node_modules/fastify/types/reply").FastifyReply<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("/{{PROJECT_ROOT}}/node_modules/fastify/types/route").RouteGenericInterface, unknown>',
                    aliasType: null,
                    aliasTypeArguments: null,
                    structure: {
                        name: 'reply',
                        type: 'FastifyReply',
                        isReadonly: false,
                        decorators: [],
                        hasQuestionToken: false,
                        hasOverrideKeyword: false,
                        kind: 30,
                        isRestParameter: false,
                    },
                },
            },
            returnType: {
                type: '{ sentence: string; }',
                name: '__object',
                escapedName: '__object',
                fullyQualifiedName: '__object',
                type_text: '{ sentence: string; }',
                aliasType: null,
                aliasTypeArguments: null,
                structure: null,
            },
        },
    },
    'api-routes.ts/functionWithTypes': {
        exportedName: 'functionWithTypes',
        fileName: 'api-routes.ts',
        metadata: {
            exportedName: 'functionWithTypes',
            kind: 'FunctionDeclaration',
            parameters: {
                body: {
                    type: 'User',
                    name: 'User',
                    escapedName: 'User',
                    fullyQualifiedName: 'User',
                    type_text: 'User',
                    aliasType: null,
                    aliasTypeArguments: null,
                    structure: {
                        name: 'body',
                        type: 'User',
                        isReadonly: false,
                        decorators: [],
                        hasQuestionToken: false,
                        hasOverrideKeyword: false,
                        kind: 30,
                        isRestParameter: false,
                    },
                },
                api: {
                    type: 'ApiDS',
                    name: 'ApiDS',
                    escapedName: 'ApiDS',
                    fullyQualifiedName: '"/{{PROJECT_ROOT}}/packages/router/src/types".ApiDS',
                    type_text: 'import("/{{PROJECT_ROOT}}/packages/router/src/types").ApiDS',
                    aliasType: null,
                    aliasTypeArguments: null,
                    structure: {
                        name: 'api',
                        type: 'ApiDS',
                        isReadonly: false,
                        decorators: [],
                        hasQuestionToken: false,
                        hasOverrideKeyword: false,
                        kind: 30,
                        isRestParameter: false,
                    },
                },
                req: {
                    type: 'FastifyRequest<RouteGenericInterface, Server, IncomingMessage, unknown, FastifyLoggerInstance>',
                    name: 'FastifyRequest',
                    escapedName: 'FastifyRequest',
                    fullyQualifiedName: '"/{{PROJECT_ROOT}}/node_modules/fastify/types/request".FastifyRequest',
                    type_text:
                        'import("/{{PROJECT_ROOT}}/node_modules/fastify/types/request").FastifyRequest<import("/{{PROJECT_ROOT}}/node_modules/fastify/types/route").RouteGenericInterface, import("http").Server, import("http").IncomingMessage, unknown, import("/{{PROJECT_ROOT}}/node_modules/fastify/types/logger").FastifyLoggerInstance>',
                    aliasType: null,
                    aliasTypeArguments: null,
                    structure: {
                        name: 'req',
                        type: 'FastifyRequest',
                        isReadonly: false,
                        decorators: [],
                        hasQuestionToken: false,
                        hasOverrideKeyword: false,
                        kind: 30,
                        isRestParameter: false,
                    },
                },
                reply: {
                    type: 'FastifyReply<Server, IncomingMessage, ServerResponse, RouteGenericInterface, unknown>',
                    name: 'FastifyReply',
                    escapedName: 'FastifyReply',
                    fullyQualifiedName: '"/{{PROJECT_ROOT}}/node_modules/fastify/types/reply".FastifyReply',
                    type_text:
                        'import("/{{PROJECT_ROOT}}/node_modules/fastify/types/reply").FastifyReply<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("/{{PROJECT_ROOT}}/node_modules/fastify/types/route").RouteGenericInterface, unknown>',
                    aliasType: null,
                    aliasTypeArguments: null,
                    structure: {
                        name: 'reply',
                        type: 'FastifyReply',
                        isReadonly: false,
                        decorators: [],
                        hasQuestionToken: false,
                        hasOverrideKeyword: false,
                        kind: 30,
                        isRestParameter: false,
                    },
                },
            },
            returnType: {
                type: 'Message',
                name: 'Message',
                escapedName: 'Message',
                fullyQualifiedName: 'Message',
                type_text: 'Message',
                aliasType: null,
                aliasTypeArguments: null,
                structure: null,
            },
        },
    },
    'api-routes.ts/arrowFunction': {
        exportedName: 'arrowFunction',
        fileName: 'api-routes.ts',
        metadata: {
            exportedName: 'arrowFunction',
            kind: 'ArrowFunction',
            parameters: {
                body: {
                    type: 'User',
                    name: 'User',
                    escapedName: 'User',
                    fullyQualifiedName: 'User',
                    type_text: 'User',
                    aliasType: null,
                    aliasTypeArguments: null,
                    structure: {
                        name: 'body',
                        isReadonly: false,
                        decorators: [],
                        hasQuestionToken: false,
                        hasOverrideKeyword: false,
                        kind: 30,
                        isRestParameter: false,
                    },
                },
                api: {
                    type: 'ApiDS',
                    name: 'ApiDS',
                    escapedName: 'ApiDS',
                    fullyQualifiedName: '"/{{PROJECT_ROOT}}/packages/router/src/types".ApiDS',
                    type_text: 'import("/{{PROJECT_ROOT}}/packages/router/src/types").ApiDS',
                    aliasType: null,
                    aliasTypeArguments: null,
                    structure: {
                        name: 'api',
                        isReadonly: false,
                        decorators: [],
                        hasQuestionToken: false,
                        hasOverrideKeyword: false,
                        kind: 30,
                        isRestParameter: false,
                    },
                },
                req: {
                    type: 'FastifyRequest<RouteGenericInterface, Server, IncomingMessage, unknown, FastifyLoggerInstance>',
                    name: 'FastifyRequest',
                    escapedName: 'FastifyRequest',
                    fullyQualifiedName: '"/{{PROJECT_ROOT}}/node_modules/fastify/types/request".FastifyRequest',
                    type_text:
                        'import("/{{PROJECT_ROOT}}/node_modules/fastify/types/request").FastifyRequest<import("/{{PROJECT_ROOT}}/node_modules/fastify/types/route").RouteGenericInterface, import("http").Server, import("http").IncomingMessage, unknown, import("/{{PROJECT_ROOT}}/node_modules/fastify/types/logger").FastifyLoggerInstance>',
                    aliasType: null,
                    aliasTypeArguments: null,
                    structure: {
                        name: 'req',
                        isReadonly: false,
                        decorators: [],
                        hasQuestionToken: false,
                        hasOverrideKeyword: false,
                        kind: 30,
                        isRestParameter: false,
                    },
                },
                reply: {
                    type: 'FastifyReply<Server, IncomingMessage, ServerResponse, RouteGenericInterface, unknown>',
                    name: 'FastifyReply',
                    escapedName: 'FastifyReply',
                    fullyQualifiedName: '"/{{PROJECT_ROOT}}/node_modules/fastify/types/reply".FastifyReply',
                    type_text:
                        'import("/{{PROJECT_ROOT}}/node_modules/fastify/types/reply").FastifyReply<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("/{{PROJECT_ROOT}}/node_modules/fastify/types/route").RouteGenericInterface, unknown>',
                    aliasType: null,
                    aliasTypeArguments: null,
                    structure: {
                        name: 'reply',
                        isReadonly: false,
                        decorators: [],
                        hasQuestionToken: false,
                        hasOverrideKeyword: false,
                        kind: 30,
                        isRestParameter: false,
                    },
                },
            },
            returnType: {
                type: '{ sentence: string; }',
                name: '__object',
                escapedName: '__object',
                fullyQualifiedName: '__object',
                type_text: '{ sentence: string; }',
                aliasType: null,
                aliasTypeArguments: null,
                structure: null,
            },
        },
    },
    'api-routes.ts/multipleExport1ArrowFunction': {
        exportedName: 'multipleExport1ArrowFunction',
        fileName: 'api-routes.ts',
        metadata: {
            exportedName: 'multipleExport1ArrowFunction',
            kind: 'ArrowFunction',
            parameters: {
                body: {
                    type: 'User',
                    name: 'User',
                    escapedName: 'User',
                    fullyQualifiedName: 'User',
                    type_text: 'User',
                    aliasType: null,
                    aliasTypeArguments: null,
                    structure: {
                        name: 'body',
                        isReadonly: false,
                        decorators: [],
                        hasQuestionToken: false,
                        hasOverrideKeyword: false,
                        kind: 30,
                        isRestParameter: false,
                    },
                },
                api: {
                    type: 'ApiDS',
                    name: 'ApiDS',
                    escapedName: 'ApiDS',
                    fullyQualifiedName: '"/{{PROJECT_ROOT}}/packages/router/src/types".ApiDS',
                    type_text: 'import("/{{PROJECT_ROOT}}/packages/router/src/types").ApiDS',
                    aliasType: null,
                    aliasTypeArguments: null,
                    structure: {
                        name: 'api',
                        isReadonly: false,
                        decorators: [],
                        hasQuestionToken: false,
                        hasOverrideKeyword: false,
                        kind: 30,
                        isRestParameter: false,
                    },
                },
                req: {
                    type: 'FastifyRequest<RouteGenericInterface, Server, IncomingMessage, unknown, FastifyLoggerInstance>',
                    name: 'FastifyRequest',
                    escapedName: 'FastifyRequest',
                    fullyQualifiedName: '"/{{PROJECT_ROOT}}/node_modules/fastify/types/request".FastifyRequest',
                    type_text:
                        'import("/{{PROJECT_ROOT}}/node_modules/fastify/types/request").FastifyRequest<import("/{{PROJECT_ROOT}}/node_modules/fastify/types/route").RouteGenericInterface, import("http").Server, import("http").IncomingMessage, unknown, import("/{{PROJECT_ROOT}}/node_modules/fastify/types/logger").FastifyLoggerInstance>',
                    aliasType: null,
                    aliasTypeArguments: null,
                    structure: {
                        name: 'req',
                        isReadonly: false,
                        decorators: [],
                        hasQuestionToken: false,
                        hasOverrideKeyword: false,
                        kind: 30,
                        isRestParameter: false,
                    },
                },
                reply: {
                    type: 'FastifyReply<Server, IncomingMessage, ServerResponse, RouteGenericInterface, unknown>',
                    name: 'FastifyReply',
                    escapedName: 'FastifyReply',
                    fullyQualifiedName: '"/{{PROJECT_ROOT}}/node_modules/fastify/types/reply".FastifyReply',
                    type_text:
                        'import("/{{PROJECT_ROOT}}/node_modules/fastify/types/reply").FastifyReply<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("/{{PROJECT_ROOT}}/node_modules/fastify/types/route").RouteGenericInterface, unknown>',
                    aliasType: null,
                    aliasTypeArguments: null,
                    structure: {
                        name: 'reply',
                        isReadonly: false,
                        decorators: [],
                        hasQuestionToken: false,
                        hasOverrideKeyword: false,
                        kind: 30,
                        isRestParameter: false,
                    },
                },
            },
            returnType: {
                type: '{ sentence: string; }',
                name: '__object',
                escapedName: '__object',
                fullyQualifiedName: '__object',
                type_text: '{ sentence: string; }',
                aliasType: null,
                aliasTypeArguments: null,
                structure: null,
            },
        },
    },
    'api-routes.ts/multipleExport2ArrowFunction': {
        exportedName: 'multipleExport2ArrowFunction',
        fileName: 'api-routes.ts',
        metadata: {
            exportedName: 'multipleExport2ArrowFunction',
            kind: 'ArrowFunction',
            parameters: {
                body: {
                    type: 'User',
                    name: 'User',
                    escapedName: 'User',
                    fullyQualifiedName: 'User',
                    type_text: 'User',
                    aliasType: null,
                    aliasTypeArguments: null,
                    structure: {
                        name: 'body',
                        isReadonly: false,
                        decorators: [],
                        hasQuestionToken: false,
                        hasOverrideKeyword: false,
                        kind: 30,
                        isRestParameter: false,
                    },
                },
            },
            returnType: {
                type: '{ sentence: string; }',
                name: '__object',
                escapedName: '__object',
                fullyQualifiedName: '__object',
                type_text: '{ sentence: string; }',
                aliasType: null,
                aliasTypeArguments: null,
                structure: null,
            },
        },
    },
    'api-routes.ts/anonimousFunction': {
        exportedName: 'anonimousFunction',
        fileName: 'api-routes.ts',
        metadata: {
            exportedName: 'anonimousFunction',
            kind: 'FunctionExpression',
            parameters: {
                body: {
                    type: 'User',
                    name: 'User',
                    escapedName: 'User',
                    fullyQualifiedName: 'User',
                    type_text: 'User',
                    aliasType: null,
                    aliasTypeArguments: null,
                    structure: {
                        name: 'body',
                        isReadonly: false,
                        decorators: [],
                        hasQuestionToken: false,
                        hasOverrideKeyword: false,
                        kind: 30,
                        isRestParameter: false,
                    },
                },
                api: {
                    type: 'ApiDS',
                    name: 'ApiDS',
                    escapedName: 'ApiDS',
                    fullyQualifiedName: '"/{{PROJECT_ROOT}}/packages/router/src/types".ApiDS',
                    type_text: 'import("/{{PROJECT_ROOT}}/packages/router/src/types").ApiDS',
                    aliasType: null,
                    aliasTypeArguments: null,
                    structure: {
                        name: 'api',
                        isReadonly: false,
                        decorators: [],
                        hasQuestionToken: false,
                        hasOverrideKeyword: false,
                        kind: 30,
                        isRestParameter: false,
                    },
                },
                req: {
                    type: 'FastifyRequest<RouteGenericInterface, Server, IncomingMessage, unknown, FastifyLoggerInstance>',
                    name: 'FastifyRequest',
                    escapedName: 'FastifyRequest',
                    fullyQualifiedName: '"/{{PROJECT_ROOT}}/node_modules/fastify/types/request".FastifyRequest',
                    type_text:
                        'import("/{{PROJECT_ROOT}}/node_modules/fastify/types/request").FastifyRequest<import("/{{PROJECT_ROOT}}/node_modules/fastify/types/route").RouteGenericInterface, import("http").Server, import("http").IncomingMessage, unknown, import("/{{PROJECT_ROOT}}/node_modules/fastify/types/logger").FastifyLoggerInstance>',
                    aliasType: null,
                    aliasTypeArguments: null,
                    structure: {
                        name: 'req',
                        isReadonly: false,
                        decorators: [],
                        hasQuestionToken: false,
                        hasOverrideKeyword: false,
                        kind: 30,
                        isRestParameter: false,
                    },
                },
                reply: {
                    type: 'FastifyReply<Server, IncomingMessage, ServerResponse, RouteGenericInterface, unknown>',
                    name: 'FastifyReply',
                    escapedName: 'FastifyReply',
                    fullyQualifiedName: '"/{{PROJECT_ROOT}}/node_modules/fastify/types/reply".FastifyReply',
                    type_text:
                        'import("/{{PROJECT_ROOT}}/node_modules/fastify/types/reply").FastifyReply<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("/{{PROJECT_ROOT}}/node_modules/fastify/types/route").RouteGenericInterface, unknown>',
                    aliasType: null,
                    aliasTypeArguments: null,
                    structure: {
                        name: 'reply',
                        isReadonly: false,
                        decorators: [],
                        hasQuestionToken: false,
                        hasOverrideKeyword: false,
                        kind: 30,
                        isRestParameter: false,
                    },
                },
            },
            returnType: {
                type: '{ sentence: string; }',
                name: '__object',
                escapedName: '__object',
                fullyQualifiedName: '__object',
                type_text: '{ sentence: string; }',
                aliasType: null,
                aliasTypeArguments: null,
                structure: null,
            },
        },
    },
    'api-routes.ts/namedFunction': {
        exportedName: 'namedFunction',
        fileName: 'api-routes.ts',
        metadata: {
            exportedName: 'namedFunction',
            kind: 'FunctionExpression',
            parameters: {
                body: {
                    type: 'User',
                    name: 'User',
                    escapedName: 'User',
                    fullyQualifiedName: 'User',
                    type_text: 'User',
                    aliasType: null,
                    aliasTypeArguments: null,
                    structure: {
                        name: 'body',
                        isReadonly: false,
                        decorators: [],
                        hasQuestionToken: false,
                        hasOverrideKeyword: false,
                        kind: 30,
                        isRestParameter: false,
                    },
                },
                api: {
                    type: 'ApiDS',
                    name: 'ApiDS',
                    escapedName: 'ApiDS',
                    fullyQualifiedName: '"/{{PROJECT_ROOT}}/packages/router/src/types".ApiDS',
                    type_text: 'import("/{{PROJECT_ROOT}}/packages/router/src/types").ApiDS',
                    aliasType: null,
                    aliasTypeArguments: null,
                    structure: {
                        name: 'api',
                        isReadonly: false,
                        decorators: [],
                        hasQuestionToken: false,
                        hasOverrideKeyword: false,
                        kind: 30,
                        isRestParameter: false,
                    },
                },
                req: {
                    type: 'FastifyRequest<RouteGenericInterface, Server, IncomingMessage, unknown, FastifyLoggerInstance>',
                    name: 'FastifyRequest',
                    escapedName: 'FastifyRequest',
                    fullyQualifiedName: '"/{{PROJECT_ROOT}}/node_modules/fastify/types/request".FastifyRequest',
                    type_text:
                        'import("/{{PROJECT_ROOT}}/node_modules/fastify/types/request").FastifyRequest<import("/{{PROJECT_ROOT}}/node_modules/fastify/types/route").RouteGenericInterface, import("http").Server, import("http").IncomingMessage, unknown, import("/{{PROJECT_ROOT}}/node_modules/fastify/types/logger").FastifyLoggerInstance>',
                    aliasType: null,
                    aliasTypeArguments: null,
                    structure: {
                        name: 'req',
                        isReadonly: false,
                        decorators: [],
                        hasQuestionToken: false,
                        hasOverrideKeyword: false,
                        kind: 30,
                        isRestParameter: false,
                    },
                },
                reply: {
                    type: 'FastifyReply<Server, IncomingMessage, ServerResponse, RouteGenericInterface, unknown>',
                    name: 'FastifyReply',
                    escapedName: 'FastifyReply',
                    fullyQualifiedName: '"/{{PROJECT_ROOT}}/node_modules/fastify/types/reply".FastifyReply',
                    type_text:
                        'import("/{{PROJECT_ROOT}}/node_modules/fastify/types/reply").FastifyReply<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("/{{PROJECT_ROOT}}/node_modules/fastify/types/route").RouteGenericInterface, unknown>',
                    aliasType: null,
                    aliasTypeArguments: null,
                    structure: {
                        name: 'reply',
                        isReadonly: false,
                        decorators: [],
                        hasQuestionToken: false,
                        hasOverrideKeyword: false,
                        kind: 30,
                        isRestParameter: false,
                    },
                },
            },
            returnType: {
                type: '{ sentence: string; }',
                name: '__object',
                escapedName: '__object',
                fullyQualifiedName: '__object',
                type_text: '{ sentence: string; }',
                aliasType: null,
                aliasTypeArguments: null,
                structure: null,
            },
        },
    },
    'api-routes.ts/arrowFunctionWithCasting': {
        exportedName: 'arrowFunctionWithCasting',
        fileName: 'api-routes.ts',
        metadata: {
            exportedName: 'arrowFunctionWithCasting',
            kind: 'ArrowFunction',
            parameters: {
                body: {
                    type: 'User',
                    name: 'User',
                    escapedName: 'User',
                    fullyQualifiedName: 'User',
                    type_text: 'User',
                    aliasType: null,
                    aliasTypeArguments: null,
                    structure: {
                        name: 'body',
                        isReadonly: false,
                        decorators: [],
                        hasQuestionToken: false,
                        hasOverrideKeyword: false,
                        kind: 30,
                        isRestParameter: false,
                    },
                },
                api: {
                    type: 'ApiDS',
                    name: 'ApiDS',
                    escapedName: 'ApiDS',
                    fullyQualifiedName: '"/{{PROJECT_ROOT}}/packages/router/src/types".ApiDS',
                    type_text: 'import("/{{PROJECT_ROOT}}/packages/router/src/types").ApiDS',
                    aliasType: null,
                    aliasTypeArguments: null,
                    structure: {
                        name: 'api',
                        isReadonly: false,
                        decorators: [],
                        hasQuestionToken: false,
                        hasOverrideKeyword: false,
                        kind: 30,
                        isRestParameter: false,
                    },
                },
                req: {
                    type: 'FastifyRequest<RouteGenericInterface, Server, IncomingMessage, unknown, FastifyLoggerInstance>',
                    name: 'FastifyRequest',
                    escapedName: 'FastifyRequest',
                    fullyQualifiedName: '"/{{PROJECT_ROOT}}/node_modules/fastify/types/request".FastifyRequest',
                    type_text:
                        'import("/{{PROJECT_ROOT}}/node_modules/fastify/types/request").FastifyRequest<import("/{{PROJECT_ROOT}}/node_modules/fastify/types/route").RouteGenericInterface, import("http").Server, import("http").IncomingMessage, unknown, import("/{{PROJECT_ROOT}}/node_modules/fastify/types/logger").FastifyLoggerInstance>',
                    aliasType: null,
                    aliasTypeArguments: null,
                    structure: {
                        name: 'req',
                        isReadonly: false,
                        decorators: [],
                        hasQuestionToken: false,
                        hasOverrideKeyword: false,
                        kind: 30,
                        isRestParameter: false,
                    },
                },
                reply: {
                    type: 'FastifyReply<Server, IncomingMessage, ServerResponse, RouteGenericInterface, unknown>',
                    name: 'FastifyReply',
                    escapedName: 'FastifyReply',
                    fullyQualifiedName: '"/{{PROJECT_ROOT}}/node_modules/fastify/types/reply".FastifyReply',
                    type_text:
                        'import("/{{PROJECT_ROOT}}/node_modules/fastify/types/reply").FastifyReply<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("/{{PROJECT_ROOT}}/node_modules/fastify/types/route").RouteGenericInterface, unknown>',
                    aliasType: null,
                    aliasTypeArguments: null,
                    structure: {
                        name: 'reply',
                        isReadonly: false,
                        decorators: [],
                        hasQuestionToken: false,
                        hasOverrideKeyword: false,
                        kind: 30,
                        isRestParameter: false,
                    },
                },
            },
            returnType: {
                type: '{ sentence: string; }',
                name: '__object',
                escapedName: '__object',
                fullyQualifiedName: '__object',
                type_text: '{ sentence: string; }',
                aliasType: null,
                aliasTypeArguments: null,
                structure: null,
            },
        },
    },
    'api-routes.ts/anonimousFunctionWithCasting': {
        exportedName: 'anonimousFunctionWithCasting',
        fileName: 'api-routes.ts',
        metadata: {
            exportedName: 'anonimousFunctionWithCasting',
            kind: 'FunctionExpression',
            parameters: {
                body: {
                    type: 'User',
                    name: 'User',
                    escapedName: 'User',
                    fullyQualifiedName: 'User',
                    type_text: 'User',
                    aliasType: null,
                    aliasTypeArguments: null,
                    structure: {
                        name: 'body',
                        isReadonly: false,
                        decorators: [],
                        hasQuestionToken: false,
                        hasOverrideKeyword: false,
                        kind: 30,
                        isRestParameter: false,
                    },
                },
                api: {
                    type: 'ApiDS',
                    name: 'ApiDS',
                    escapedName: 'ApiDS',
                    fullyQualifiedName: '"/{{PROJECT_ROOT}}/packages/router/src/types".ApiDS',
                    type_text: 'import("/{{PROJECT_ROOT}}/packages/router/src/types").ApiDS',
                    aliasType: null,
                    aliasTypeArguments: null,
                    structure: {
                        name: 'api',
                        isReadonly: false,
                        decorators: [],
                        hasQuestionToken: false,
                        hasOverrideKeyword: false,
                        kind: 30,
                        isRestParameter: false,
                    },
                },
                req: {
                    type: 'FastifyRequest<RouteGenericInterface, Server, IncomingMessage, unknown, FastifyLoggerInstance>',
                    name: 'FastifyRequest',
                    escapedName: 'FastifyRequest',
                    fullyQualifiedName: '"/{{PROJECT_ROOT}}/node_modules/fastify/types/request".FastifyRequest',
                    type_text:
                        'import("/{{PROJECT_ROOT}}/node_modules/fastify/types/request").FastifyRequest<import("/{{PROJECT_ROOT}}/node_modules/fastify/types/route").RouteGenericInterface, import("http").Server, import("http").IncomingMessage, unknown, import("/{{PROJECT_ROOT}}/node_modules/fastify/types/logger").FastifyLoggerInstance>',
                    aliasType: null,
                    aliasTypeArguments: null,
                    structure: {
                        name: 'req',
                        isReadonly: false,
                        decorators: [],
                        hasQuestionToken: false,
                        hasOverrideKeyword: false,
                        kind: 30,
                        isRestParameter: false,
                    },
                },
                reply: {
                    type: 'FastifyReply<Server, IncomingMessage, ServerResponse, RouteGenericInterface, unknown>',
                    name: 'FastifyReply',
                    escapedName: 'FastifyReply',
                    fullyQualifiedName: '"/{{PROJECT_ROOT}}/node_modules/fastify/types/reply".FastifyReply',
                    type_text:
                        'import("/{{PROJECT_ROOT}}/node_modules/fastify/types/reply").FastifyReply<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("/{{PROJECT_ROOT}}/node_modules/fastify/types/route").RouteGenericInterface, unknown>',
                    aliasType: null,
                    aliasTypeArguments: null,
                    structure: {
                        name: 'reply',
                        isReadonly: false,
                        decorators: [],
                        hasQuestionToken: false,
                        hasOverrideKeyword: false,
                        kind: 30,
                        isRestParameter: false,
                    },
                },
            },
            returnType: {
                type: '{ sentence: string; }',
                name: '__object',
                escapedName: '__object',
                fullyQualifiedName: '__object',
                type_text: '{ sentence: string; }',
                aliasType: null,
                aliasTypeArguments: null,
                structure: null,
            },
        },
    },
    'api-routes.ts/optionsObjectWithTypes': {
        exportedName: 'optionsObjectWithTypes',
        fileName: 'api-routes.ts',
        metadata: {exportedName: 'optionsObjectWithTypes', kind: 'VariableDeclaration'},
    },
    'api-routes.ts/optionsObjectWithCasting': {
        exportedName: 'optionsObjectWithCasting',
        fileName: 'api-routes.ts',
        metadata: {exportedName: 'optionsObjectWithCasting', kind: 'AsExpression'},
    },
    'api-routes.ts/optionsObjecWithReferences': {
        exportedName: 'optionsObjecWithReferences',
        fileName: 'api-routes.ts',
        metadata: {exportedName: 'optionsObjecWithReferences', kind: 'VariableDeclaration'},
    },
    'api-routes.ts/asyncAnonimousFunction': {
        exportedName: 'asyncAnonimousFunction',
        fileName: 'api-routes.ts',
        metadata: {
            exportedName: 'asyncAnonimousFunction',
            kind: 'FunctionExpression',
            parameters: {
                body: {
                    type: 'User',
                    name: 'User',
                    escapedName: 'User',
                    fullyQualifiedName: 'User',
                    type_text: 'User',
                    aliasType: null,
                    aliasTypeArguments: null,
                    structure: {
                        name: 'body',
                        isReadonly: false,
                        decorators: [],
                        hasQuestionToken: false,
                        hasOverrideKeyword: false,
                        kind: 30,
                        isRestParameter: false,
                    },
                },
                api: {
                    type: 'ApiDS',
                    name: 'ApiDS',
                    escapedName: 'ApiDS',
                    fullyQualifiedName: '"/{{PROJECT_ROOT}}/packages/router/src/types".ApiDS',
                    type_text: 'import("/{{PROJECT_ROOT}}/packages/router/src/types").ApiDS',
                    aliasType: null,
                    aliasTypeArguments: null,
                    structure: {
                        name: 'api',
                        isReadonly: false,
                        decorators: [],
                        hasQuestionToken: false,
                        hasOverrideKeyword: false,
                        kind: 30,
                        isRestParameter: false,
                    },
                },
                req: {
                    type: 'FastifyRequest<RouteGenericInterface, Server, IncomingMessage, unknown, FastifyLoggerInstance>',
                    name: 'FastifyRequest',
                    escapedName: 'FastifyRequest',
                    fullyQualifiedName: '"/{{PROJECT_ROOT}}/node_modules/fastify/types/request".FastifyRequest',
                    type_text:
                        'import("/{{PROJECT_ROOT}}/node_modules/fastify/types/request").FastifyRequest<import("/{{PROJECT_ROOT}}/node_modules/fastify/types/route").RouteGenericInterface, import("http").Server, import("http").IncomingMessage, unknown, import("/{{PROJECT_ROOT}}/node_modules/fastify/types/logger").FastifyLoggerInstance>',
                    aliasType: null,
                    aliasTypeArguments: null,
                    structure: {
                        name: 'req',
                        isReadonly: false,
                        decorators: [],
                        hasQuestionToken: false,
                        hasOverrideKeyword: false,
                        kind: 30,
                        isRestParameter: false,
                    },
                },
                reply: {
                    type: 'FastifyReply<Server, IncomingMessage, ServerResponse, RouteGenericInterface, unknown>',
                    name: 'FastifyReply',
                    escapedName: 'FastifyReply',
                    fullyQualifiedName: '"/{{PROJECT_ROOT}}/node_modules/fastify/types/reply".FastifyReply',
                    type_text:
                        'import("/{{PROJECT_ROOT}}/node_modules/fastify/types/reply").FastifyReply<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("/{{PROJECT_ROOT}}/node_modules/fastify/types/route").RouteGenericInterface, unknown>',
                    aliasType: null,
                    aliasTypeArguments: null,
                    structure: {
                        name: 'reply',
                        isReadonly: false,
                        decorators: [],
                        hasQuestionToken: false,
                        hasOverrideKeyword: false,
                        kind: 30,
                        isRestParameter: false,
                    },
                },
            },
            returnType: {
                type: 'Promise<{ sentence: string; }>',
                name: 'Promise',
                escapedName: 'Promise',
                fullyQualifiedName: 'Promise',
                type_text: 'Promise<{ sentence: string; }>',
                aliasType: null,
                aliasTypeArguments: null,
                structure: null,
            },
        },
    },
    'api-routes.ts/asyncArrowFunction': {
        exportedName: 'asyncArrowFunction',
        fileName: 'api-routes.ts',
        metadata: {
            exportedName: 'asyncArrowFunction',
            kind: 'ArrowFunction',
            parameters: {
                body: {
                    type: 'User',
                    name: 'User',
                    escapedName: 'User',
                    fullyQualifiedName: 'User',
                    type_text: 'User',
                    aliasType: null,
                    aliasTypeArguments: null,
                    structure: {
                        name: 'body',
                        type: 'User',
                        isReadonly: false,
                        decorators: [],
                        hasQuestionToken: false,
                        hasOverrideKeyword: false,
                        kind: 30,
                        isRestParameter: false,
                    },
                },
                ds: {
                    type: 'ApiDS',
                    name: 'ApiDS',
                    escapedName: 'ApiDS',
                    fullyQualifiedName: '"/{{PROJECT_ROOT}}/packages/router/src/types".ApiDS',
                    type_text: 'import("/{{PROJECT_ROOT}}/packages/router/src/types").ApiDS',
                    aliasType: null,
                    aliasTypeArguments: null,
                    structure: {
                        name: 'ds',
                        type: 'ApiDS',
                        isReadonly: false,
                        decorators: [],
                        hasQuestionToken: false,
                        hasOverrideKeyword: false,
                        kind: 30,
                        isRestParameter: false,
                    },
                },
            },
            returnType: {
                type: 'Promise<User>',
                name: 'Promise',
                escapedName: 'Promise',
                fullyQualifiedName: 'Promise',
                type_text: 'Promise<User>',
                aliasType: null,
                aliasTypeArguments: null,
                structure: null,
            },
        },
    },
    'api-routes.ts/asyncOptionsObjectWithCasting': {
        exportedName: 'asyncOptionsObjectWithCasting',
        fileName: 'api-routes.ts',
        metadata: {exportedName: 'asyncOptionsObjectWithCasting', kind: 'AsExpression'},
    },
    'api-routes.ts/exportedAfterDeclaration': {
        exportedName: 'exportedAfterDeclaration',
        fileName: 'api-routes.ts',
        metadata: {
            exportedName: 'exportedAfterDeclaration',
            kind: 'ArrowFunction',
            parameters: {
                body: {
                    type: 'User',
                    name: 'User',
                    escapedName: 'User',
                    fullyQualifiedName: 'User',
                    type_text: 'User',
                    aliasType: null,
                    aliasTypeArguments: null,
                    structure: {
                        name: 'body',
                        isReadonly: false,
                        decorators: [],
                        hasQuestionToken: false,
                        hasOverrideKeyword: false,
                        kind: 30,
                        isRestParameter: false,
                    },
                },
                api: {
                    type: 'ApiDS',
                    name: 'ApiDS',
                    escapedName: 'ApiDS',
                    fullyQualifiedName: '"/{{PROJECT_ROOT}}/packages/router/src/types".ApiDS',
                    type_text: 'import("/{{PROJECT_ROOT}}/packages/router/src/types").ApiDS',
                    aliasType: null,
                    aliasTypeArguments: null,
                    structure: {
                        name: 'api',
                        isReadonly: false,
                        decorators: [],
                        hasQuestionToken: false,
                        hasOverrideKeyword: false,
                        kind: 30,
                        isRestParameter: false,
                    },
                },
                req: {
                    type: 'FastifyRequest<RouteGenericInterface, Server, IncomingMessage, unknown, FastifyLoggerInstance>',
                    name: 'FastifyRequest',
                    escapedName: 'FastifyRequest',
                    fullyQualifiedName: '"/{{PROJECT_ROOT}}/node_modules/fastify/types/request".FastifyRequest',
                    type_text:
                        'import("/{{PROJECT_ROOT}}/node_modules/fastify/types/request").FastifyRequest<import("/{{PROJECT_ROOT}}/node_modules/fastify/types/route").RouteGenericInterface, import("http").Server, import("http").IncomingMessage, unknown, import("/{{PROJECT_ROOT}}/node_modules/fastify/types/logger").FastifyLoggerInstance>',
                    aliasType: null,
                    aliasTypeArguments: null,
                    structure: {
                        name: 'req',
                        isReadonly: false,
                        decorators: [],
                        hasQuestionToken: false,
                        hasOverrideKeyword: false,
                        kind: 30,
                        isRestParameter: false,
                    },
                },
                reply: {
                    type: 'FastifyReply<Server, IncomingMessage, ServerResponse, RouteGenericInterface, unknown>',
                    name: 'FastifyReply',
                    escapedName: 'FastifyReply',
                    fullyQualifiedName: '"/{{PROJECT_ROOT}}/node_modules/fastify/types/reply".FastifyReply',
                    type_text:
                        'import("/{{PROJECT_ROOT}}/node_modules/fastify/types/reply").FastifyReply<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("/{{PROJECT_ROOT}}/node_modules/fastify/types/route").RouteGenericInterface, unknown>',
                    aliasType: null,
                    aliasTypeArguments: null,
                    structure: {
                        name: 'reply',
                        isReadonly: false,
                        decorators: [],
                        hasQuestionToken: false,
                        hasOverrideKeyword: false,
                        kind: 30,
                        isRestParameter: false,
                    },
                },
            },
            returnType: {
                type: '{ sentence: string; }',
                name: '__object',
                escapedName: '__object',
                fullyQualifiedName: '__object',
                type_text: '{ sentence: string; }',
                aliasType: null,
                aliasTypeArguments: null,
                structure: null,
            },
        },
    },
    'api-routes.ts/exportedAndRenameAfterDeclaration': {
        exportedName: 'exportedAndRenameAfterDeclaration',
        fileName: 'api-routes.ts',
        metadata: {
            exportedName: 'exportedAndRenameAfterDeclaration',
            kind: 'ArrowFunction',
            parameters: {
                body: {
                    type: 'User',
                    name: 'User',
                    escapedName: 'User',
                    fullyQualifiedName: 'User',
                    type_text: 'User',
                    aliasType: null,
                    aliasTypeArguments: null,
                    structure: {
                        name: 'body',
                        isReadonly: false,
                        decorators: [],
                        hasQuestionToken: false,
                        hasOverrideKeyword: false,
                        kind: 30,
                        isRestParameter: false,
                    },
                },
                api: {
                    type: 'ApiDS',
                    name: 'ApiDS',
                    escapedName: 'ApiDS',
                    fullyQualifiedName: '"/{{PROJECT_ROOT}}/packages/router/src/types".ApiDS',
                    type_text: 'import("/{{PROJECT_ROOT}}/packages/router/src/types").ApiDS',
                    aliasType: null,
                    aliasTypeArguments: null,
                    structure: {
                        name: 'api',
                        isReadonly: false,
                        decorators: [],
                        hasQuestionToken: false,
                        hasOverrideKeyword: false,
                        kind: 30,
                        isRestParameter: false,
                    },
                },
                req: {
                    type: 'FastifyRequest<RouteGenericInterface, Server, IncomingMessage, unknown, FastifyLoggerInstance>',
                    name: 'FastifyRequest',
                    escapedName: 'FastifyRequest',
                    fullyQualifiedName: '"/{{PROJECT_ROOT}}/node_modules/fastify/types/request".FastifyRequest',
                    type_text:
                        'import("/{{PROJECT_ROOT}}/node_modules/fastify/types/request").FastifyRequest<import("/{{PROJECT_ROOT}}/node_modules/fastify/types/route").RouteGenericInterface, import("http").Server, import("http").IncomingMessage, unknown, import("/{{PROJECT_ROOT}}/node_modules/fastify/types/logger").FastifyLoggerInstance>',
                    aliasType: null,
                    aliasTypeArguments: null,
                    structure: {
                        name: 'req',
                        isReadonly: false,
                        decorators: [],
                        hasQuestionToken: false,
                        hasOverrideKeyword: false,
                        kind: 30,
                        isRestParameter: false,
                    },
                },
                reply: {
                    type: 'FastifyReply<Server, IncomingMessage, ServerResponse, RouteGenericInterface, unknown>',
                    name: 'FastifyReply',
                    escapedName: 'FastifyReply',
                    fullyQualifiedName: '"/{{PROJECT_ROOT}}/node_modules/fastify/types/reply".FastifyReply',
                    type_text:
                        'import("/{{PROJECT_ROOT}}/node_modules/fastify/types/reply").FastifyReply<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("/{{PROJECT_ROOT}}/node_modules/fastify/types/route").RouteGenericInterface, unknown>',
                    aliasType: null,
                    aliasTypeArguments: null,
                    structure: {
                        name: 'reply',
                        isReadonly: false,
                        decorators: [],
                        hasQuestionToken: false,
                        hasOverrideKeyword: false,
                        kind: 30,
                        isRestParameter: false,
                    },
                },
            },
            returnType: {
                type: '{ sentence: string; }',
                name: '__object',
                escapedName: '__object',
                fullyQualifiedName: '__object',
                type_text: '{ sentence: string; }',
                aliasType: null,
                aliasTypeArguments: null,
                structure: null,
            },
        },
    },
    'api-routes.ts/someRoute2': {
        exportedName: 'someRoute2',
        fileName: 'api-routes.ts',
        metadata: {
            exportedName: 'someRoute2',
            kind: 'ArrowFunction',
            parameters: {
                body: {
                    type: 'User',
                    name: 'User',
                    escapedName: 'User',
                    fullyQualifiedName: 'User',
                    type_text: 'User',
                    aliasType: null,
                    aliasTypeArguments: null,
                    structure: {
                        name: 'body',
                        isReadonly: false,
                        decorators: [],
                        hasQuestionToken: false,
                        hasOverrideKeyword: false,
                        kind: 30,
                        isRestParameter: false,
                    },
                },
                api: {
                    type: 'ApiDS',
                    name: 'ApiDS',
                    escapedName: 'ApiDS',
                    fullyQualifiedName: '"/{{PROJECT_ROOT}}/packages/router/src/types".ApiDS',
                    type_text: 'import("/{{PROJECT_ROOT}}/packages/router/src/types").ApiDS',
                    aliasType: null,
                    aliasTypeArguments: null,
                    structure: {
                        name: 'api',
                        isReadonly: false,
                        decorators: [],
                        hasQuestionToken: false,
                        hasOverrideKeyword: false,
                        kind: 30,
                        isRestParameter: false,
                    },
                },
                req: {
                    type: 'FastifyRequest<RouteGenericInterface, Server, IncomingMessage, unknown, FastifyLoggerInstance>',
                    name: 'FastifyRequest',
                    escapedName: 'FastifyRequest',
                    fullyQualifiedName: '"/{{PROJECT_ROOT}}/node_modules/fastify/types/request".FastifyRequest',
                    type_text:
                        'import("/{{PROJECT_ROOT}}/node_modules/fastify/types/request").FastifyRequest<import("/{{PROJECT_ROOT}}/node_modules/fastify/types/route").RouteGenericInterface, import("http").Server, import("http").IncomingMessage, unknown, import("/{{PROJECT_ROOT}}/node_modules/fastify/types/logger").FastifyLoggerInstance>',
                    aliasType: null,
                    aliasTypeArguments: null,
                    structure: {
                        name: 'req',
                        isReadonly: false,
                        decorators: [],
                        hasQuestionToken: false,
                        hasOverrideKeyword: false,
                        kind: 30,
                        isRestParameter: false,
                    },
                },
                reply: {
                    type: 'FastifyReply<Server, IncomingMessage, ServerResponse, RouteGenericInterface, unknown>',
                    name: 'FastifyReply',
                    escapedName: 'FastifyReply',
                    fullyQualifiedName: '"/{{PROJECT_ROOT}}/node_modules/fastify/types/reply".FastifyReply',
                    type_text:
                        'import("/{{PROJECT_ROOT}}/node_modules/fastify/types/reply").FastifyReply<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("/{{PROJECT_ROOT}}/node_modules/fastify/types/route").RouteGenericInterface, unknown>',
                    aliasType: null,
                    aliasTypeArguments: null,
                    structure: {
                        name: 'reply',
                        isReadonly: false,
                        decorators: [],
                        hasQuestionToken: false,
                        hasOverrideKeyword: false,
                        kind: 30,
                        isRestParameter: false,
                    },
                },
            },
            returnType: {
                type: '{ sentence: string; }',
                name: '__object',
                escapedName: '__object',
                fullyQualifiedName: '__object',
                type_text: '{ sentence: string; }',
                aliasType: null,
                aliasTypeArguments: null,
                structure: null,
            },
        },
    },
    'api-routes.ts/reExportedRoute2': {
        exportedName: 'reExportedRoute2',
        fileName: 'api-routes.ts',
        metadata: {
            exportedName: 'reExportedRoute2',
            kind: 'ArrowFunction',
            parameters: {
                body: {
                    type: 'User',
                    name: 'User',
                    escapedName: 'User',
                    fullyQualifiedName: 'User',
                    type_text: 'User',
                    aliasType: null,
                    aliasTypeArguments: null,
                    structure: {
                        name: 'body',
                        isReadonly: false,
                        decorators: [],
                        hasQuestionToken: false,
                        hasOverrideKeyword: false,
                        kind: 30,
                        isRestParameter: false,
                    },
                },
                api: {
                    type: 'ApiDS',
                    name: 'ApiDS',
                    escapedName: 'ApiDS',
                    fullyQualifiedName: '"/{{PROJECT_ROOT}}/packages/router/src/types".ApiDS',
                    type_text: 'import("/{{PROJECT_ROOT}}/packages/router/src/types").ApiDS',
                    aliasType: null,
                    aliasTypeArguments: null,
                    structure: {
                        name: 'api',
                        isReadonly: false,
                        decorators: [],
                        hasQuestionToken: false,
                        hasOverrideKeyword: false,
                        kind: 30,
                        isRestParameter: false,
                    },
                },
                req: {
                    type: 'FastifyRequest<RouteGenericInterface, Server, IncomingMessage, unknown, FastifyLoggerInstance>',
                    name: 'FastifyRequest',
                    escapedName: 'FastifyRequest',
                    fullyQualifiedName: '"/{{PROJECT_ROOT}}/node_modules/fastify/types/request".FastifyRequest',
                    type_text:
                        'import("/{{PROJECT_ROOT}}/node_modules/fastify/types/request").FastifyRequest<import("/{{PROJECT_ROOT}}/node_modules/fastify/types/route").RouteGenericInterface, import("http").Server, import("http").IncomingMessage, unknown, import("/{{PROJECT_ROOT}}/node_modules/fastify/types/logger").FastifyLoggerInstance>',
                    aliasType: null,
                    aliasTypeArguments: null,
                    structure: {
                        name: 'req',
                        isReadonly: false,
                        decorators: [],
                        hasQuestionToken: false,
                        hasOverrideKeyword: false,
                        kind: 30,
                        isRestParameter: false,
                    },
                },
                reply: {
                    type: 'FastifyReply<Server, IncomingMessage, ServerResponse, RouteGenericInterface, unknown>',
                    name: 'FastifyReply',
                    escapedName: 'FastifyReply',
                    fullyQualifiedName: '"/{{PROJECT_ROOT}}/node_modules/fastify/types/reply".FastifyReply',
                    type_text:
                        'import("/{{PROJECT_ROOT}}/node_modules/fastify/types/reply").FastifyReply<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("/{{PROJECT_ROOT}}/node_modules/fastify/types/route").RouteGenericInterface, unknown>',
                    aliasType: null,
                    aliasTypeArguments: null,
                    structure: {
                        name: 'reply',
                        isReadonly: false,
                        decorators: [],
                        hasQuestionToken: false,
                        hasOverrideKeyword: false,
                        kind: 30,
                        isRestParameter: false,
                    },
                },
            },
            returnType: {
                type: '{ sentence: string; }',
                name: '__object',
                escapedName: '__object',
                fullyQualifiedName: '__object',
                type_text: '{ sentence: string; }',
                aliasType: null,
                aliasTypeArguments: null,
                structure: null,
            },
        },
    },
};
